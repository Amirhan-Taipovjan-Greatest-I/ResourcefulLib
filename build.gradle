plugins {
    id "architectury-plugin" version "3.4+"
    id "dev.architectury.loom" version "1.1.+" apply false
    id "com.teamresourceful.resourcefulgradle"
}

architectury {
    minecraft = minecraft_version
}

ext {
    repoUrl = nightly.toBoolean() ? "https://nexus.resourcefulbees.com/repository/maven-nightly/" : "https://nexus.resourcefulbees.com/repository/maven-releases/"
    ENV = System.getenv()
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:$minecraft_version"
        mappings loom.officialMojangMappings()
    }

    repositories {
        maven { url "https://nexus.resourcefulbees.com/repository/maven-public/" }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    archivesBaseName = archives_base_name
    version = libs.versions.mod.version.get()
    group = maven_group

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

resourcefulGradle {
    templates {
        //I have no idea how to get rid of the warnings in idea. switching from interface to abstract
        //gets rid of *some* warnings. so we just have to live with them as they are now since that's how
        //the gradle docs say to make a plugin with nested DSL

        readme {
            source = file("templates/README.md.template")
            injectedValues = [
                    "version"            : libs.versions.mod.version.get(),
                    "mc_version"         : minecraft_version
            ]
        }
        discordEmbed {
            injectedValues = [
                    "version"      : libs.versions.mod.version.get(),
                    "mc_version"   : minecraft_version,
                    "forge_version": forge_version,
                    "fabric_version": fabric_loader_version
            ]

            def template = nightly.toBoolean() ? "nightly_embed.json.template" : "release_embed.json.template"
            source = file("templates/$template")
        }
    }
}
